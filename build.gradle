plugins {
	id 'fabric-loom' version '0.2.3-SNAPSHOT'
	id 'maven-publish'
	id 'java-library'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = System.getenv("COMMIT") ? "${project.sandbox_version}-${System.getenv("COMMIT")}" : "${project.sandbox_version}"
group = project.maven_group

minecraft {
}

repositories {
	maven { url 'https://jitpack.io' }
	maven { url 'https://cdn.hrzn.studio/maven' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"
	implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
	implementation 'com.github.Vatuu:discord-rpc:1.6.2'
	implementation 'com.electronwill.night-config:core:3.6.0'
	implementation 'com.electronwill.night-config:toml:3.6.0'
	implementation 'com.github.zafarkhaja:java-semver:0.9.0'

	if(System.getenv("COMMIT")) {
		implementation 'com.hrznstudio.sandbox:sandbox-api:+'
	} else {
		implementation project(':SandboxAPI')
		runtime project(':TestMod')
	}
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(jar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
	repositories {
		maven {
			url "s3://cdn.hrzn.studio/maven"
			authentication {
				awsIm(AwsImAuthentication)
			}
		}
	}
}
